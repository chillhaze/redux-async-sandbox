{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","components/Filter/Filter.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/App/App.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","contactsReducer","createReducer","actions","state","find","item","alert","filter","contact","filteredReducer","_","phoneBookReducer","combineReducers","contacts","filtered","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","phonebook","persistReducer","devTools","process","persistor","persistStore","ContactForm","useState","setName","setNumber","dispatch","useDispatch","nameInputId","numberInputId","handleFormChange","e","currentTarget","value","formReset","className","css","container","form","onSubmit","preventDefault","label","htmlFor","type","placeholder","pattern","title","required","onChange","input","btn","getContacts","getFiltered","Filter","useSelector","ContactItem","onDeleteBtnPush","listItem","contactIcon","btnDelete","onClick","ContactList","filteredContacts","toLowerCase","includes","contactsList","map","App","icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.a660729c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__oVDC4\",\"input\":\"Filter_input__l2tjN\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction(\n  'contacts/addContact',\n  (name, number) => {\n    return {\n      payload: {\n        id: uuidv4(),\n        name: name,\n        number: number,\n      },\n    };\n  },\n);\n// console.log(addContact('test', '000000'));\nexport const deleteContact = createAction('contacts/delete');\nexport const changeFilter = createAction('contacts/filtered');\n\n//-----------no react-toolkit actions versin\n// export const addContact = (name, number) => ({\n//   type: actions.ADD_CONTACT,\n//   payload: {\n//     id: uuidv4(),\n//     name: name,\n//     number: number,\n//   },\n// });\n\n// export const deleteContact = id => ({\n//   type: actions.DELETE_CONTACT,\n//   payload: id,\n// });\n\n// export const changeFilter = value => ({\n//   type: actions.FILTERED,\n//   payload: value,\n// });\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport * as actions from './contacts-actions';\n\nconst initialContactsState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst contactsReducer = createReducer(initialContactsState, {\n  [actions.addContact]: (state, { payload }) => {\n    if (state.find(item => item.name === payload.name)) {\n      alert(`${payload.name + ' is already in contacts'}`);\n      return state;\n    }\n    return [...state, payload];\n  },\n\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst initinalFilterState = '';\nconst filteredReducer = createReducer(initinalFilterState, {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport const phoneBookReducer = combineReducers({\n  contacts: contactsReducer,\n  filtered: filteredReducer,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { phoneBookReducer } from './contacts/contacts-reducer';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  persistStore,\n  persistReducer,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n//Просмотр фунций-прослоек в console.log\n// console.log(middleware);\n\n//--------------стейт в localstorage, без phoneBookReducer.filtered (добавил blacklist)\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filtered'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    phonebook: persistReducer(contactsPersistConfig, phoneBookReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development', //по умолчанию true, можно не указывать их в объекте, включаем только в режиме разработки через NODE_ENV\n});\n//-----------------------------------------\n\n//--------------весь стейт в localstorage\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n// };\n// const rootReducer = combineReducers({\n//   phonebook: phoneBookReducer, //объект из rootReducer\n// });\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// export const store = configureStore({\n//   reducer: persistedReducer,\n//   middleware,\n//   devTools: process.env.NODE_ENV === 'development', //по умолчанию true, можно не указывать их в объекте, включаем только в режиме разработки через NODE_ENV\n// });\n//-----------------------------------------\n\nexport const persistor = persistStore(store);\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport css from './ContactForm.module.css';\n\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-actions';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // console.log('ContactForm contacts: ', contacts);\n  // console.log('ContactForm onSubmit: ', addContact);\n\n  const dispatch = useDispatch();\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const handleFormChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact(name, number));\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={css.container}>\n      <form className={css.form} onSubmit={handleOnSubmit}>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            placeholder=\"Mark Zuckerberg\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleFormChange}\n            className={css.input}\n            id={nameInputId}\n          />\n        </label>\n\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            placeholder=\"xxx-xx-xx\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleFormChange}\n            className={css.input}\n            id={numberInputId}\n          />\n        </label>\n\n        <button type=\"submit\" className={css.btn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.array,\n  onSubmit: PropTypes.func,\n};\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     addContact: (name, number) => dispatch(addContact(name, number)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n","export const getContacts = state => state.phonebook.contacts;\nexport const getFiltered = state => state.phonebook.filtered;\n","import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFiltered } from '../../redux/contacts/contacts-selectors';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  //вариант получить filtered без redux/contacts/conatcts-selectors\n  // const filtered = useSelector(({ phonebook }) => phonebook.filtered);\n  const filtered = useSelector(getFiltered);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={css.container}>\n      <h2 className={css.title}>Search by name</h2>\n\n      <input\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={filtered}\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n        className={css.input}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n};\n\n// const mapStateToProps = ({ phonebook }) => {\n//   return {\n//     filtered: phonebook.filtered,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     changeFilter: e => dispatch(changeFilter(e.currentTarget.value)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { IoIosContact } from 'react-icons/io';\nimport { AiFillPhone } from 'react-icons/ai';\n\nexport const ContactItem = ({ id, name, number, onDeleteBtnPush }) => {\n  return (\n    <li className={css.listItem} key={id}>\n      <p className={css.name}>\n        <IoIosContact className={css.contactIcon} />\n        {name}:\n      </p>\n      <p className={css.number}>\n        <AiFillPhone className={css.contactIcon} />\n        {number}\n      </p>\n      <button\n        type=\"button\"\n        className={css.btnDelete}\n        onClick={() => onDeleteBtnPush(id)}\n      >\n        <FaTrashAlt />\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteBtnPush: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { ContactItem } from './ContactItem';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport {\n  getContacts,\n  getFiltered,\n} from '../../redux/contacts/contacts-selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filtered = useSelector(getFiltered);\n\n  //короткая запись, лучше по одному вытягивать значения\n  // const { contacts, filtered } = useSelector(state => state.phonebook);\n\n  const filteredContacts = contacts.filter(item =>\n    item.name.toLowerCase().includes(filtered.toLowerCase()),\n  );\n\n  const dispatch = useDispatch();\n\n  return (\n    <div className={css.container}>\n      <ul className={css.contactsList}>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              onDeleteBtnPush={() => dispatch(deleteContact(id))}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onDeleteBtnPush: PropTypes.func,\n};\n\n// const mapStateToProps = state => {\n//   const { contacts, filtered } = state.phonebook;\n\n//   const filteredContacts = contacts.filter(item =>\n//     item.name.toLowerCase().includes(filtered.toLowerCase()),\n//   );\n//   return {\n//     contacts: filteredContacts,\n//     filtered: state.filtered,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     deleteContact: id => dispatch(deleteContact(id)),\n//   };\n// };\n//на хуках удаляю connect, mapStateToProps,mapDispatchToProps - использую useSelector, useDispatch\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nexport default ContactList;\n","// import { useState, useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\nimport css from './App.module.css';\nimport { RiContactsBook2Fill } from 'react-icons/ri';\nimport { IoMdContacts } from 'react-icons/io';\n\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nconst App = () => {\n  return (\n    <div className={css.container}>\n      <h1 className={css.title}>\n        Phonebook <RiContactsBook2Fill className={css.icon} />\n      </h1>\n      <ContactForm />\n\n      <Filter />\n      <h2 className={css.title}>\n        Contacts\n        <IoMdContacts className={css.icon} />\n      </h2>\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\n// console.log('STATE ---> ', store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__15e9l\",\"contactsList\":\"ContactList_contactsList__3kpYZ\",\"listItem\":\"ContactList_listItem__2DwLK\",\"contactIcon\":\"ContactList_contactIcon__3TZkT\",\"number\":\"ContactList_number__mARQG\",\"btnDelete\":\"ContactList_btnDelete__3qJry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__2Vz90\",\"form\":\"ContactForm_form__d4VqF\",\"label\":\"ContactForm_label__3Yj4x\",\"input\":\"ContactForm_input__AbQJN\",\"btn\":\"ContactForm_btn__2rZP5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2ZXvj\",\"title\":\"App_title__35b3G\",\"icon\":\"App_icon__10-my\"};"],"sourceRoot":""}